Main = markOutputNode!; markActiveNode!; try jweighted:{merge22, merge21}; unmarkNode!

markOutputNode
(
	a : list
)
[
	(n0, a : "OUT")
	|
]
=>
[
	(n0, a : "OUT"#blue)
	|
]
interface = {
	n0
}

markActiveNode
(
	a,b, c : list
)
[
	(n0, a#blue)
	(n1, b)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a#blue)
	(n1, b#blue)
	|
	(e0, n0, n1, c)
]
interface = {
	n0,n1
}

unmarkNode
(
	a : list
)
[
	(n0, a#any)
	|
]
=>
[
	(n0, a)
	|
]
interface = {
	n0
}

merge22
(
  a, b, c, d, e : string;
  g, h, i, j, k, l : int
)
[
  (n0, a#blue)
  (n1, b#blue)
  (n2, c#blue)
  (n3, d#blue)
  (n4, e#blue)
  (n5, c#blue)
  |
  (e0, n0, n2, g)
  (e1, n1, n5, h)
  (e2, n2, n3, i)
  (e3, n2, n4, j)
  (e2, n5, n3, k)
  (e3, n5, n4, l)
]
=>
[
  (n0, a#blue)
  (n1, b#blue)
  (n2, c#blue)
  (n3, d#blue)
  (n4, e#blue)
  (n5, c#blue)
  |
  (e0, n0, n2, g)
  (e1, n1, n2, h)
  (e2, n2, n3, i)
  (e3, n2, n4, j)
  (e2, n5, n3, k)
  (e3, n5, n4, l)
]
interface = {
  n0, n1, n2, n3, n4, n5
}

merge21
(
  a, b, c, d, e : string;
  g, h, i, j, k, l : int
)
[
  (n0, a#blue)
  (n1, b#blue)
  (n2, c#blue)
  (n3, d#blue)
  (n5, c#blue)
  |
  (e0, n0, n2, g)
  (e1, n1, n5, h)
  (e2, n2, n3, i)
  (e3, n2, n3, j)
  (e2, n5, n3, k)
  (e3, n5, n3, l)
]
=>
[
  (n0, a#blue)
  (n1, b#blue)
  (n2, c#blue)
  (n3, d#blue)
  (n5, c#blue)
  |
  (e0, n0, n2, g)
  (e1, n1, n2, h)
  (e2, n2, n3, i)
  (e3, n2, n3, j)
  (e2, n5, n3, k)
  (e3, n5, n3, l)
]
interface = {
  n0, n1, n2, n3, n5
}
