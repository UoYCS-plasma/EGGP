Main = [pickNode]; [mutateNode]; {markOutputsBlue, markOutputsRed}!; [addEdgeToArity,deleteEdgeToArity]!; unmarkBlue!; resetArityCounter; bucketEdge!; [readdEdge]!; deleteArityC; {unmarkBlue, unmarkRed}!

pickNode
(
	a : list;
	s : string
)
[1.0]
[
	(n0, a:s)
	|
]
=>
[
	(n0, a:s#blue)
	|
]
interface =
{
	n0
}
where s != "IN" and s != "OUT"

mutateNode
(
	a : list;
	s, f : string;
	x : int
)
[1.0]
[
	(n0, a:s#blue)
	(f0(R), "FunctionSet":f:x)
	|
]
=>
[
	(n0, a:f#red)
	(f0(R), "FunctionSet":f:x)
	(a0(R), "Arity":outdeg(n0))
	(a1(R), "TArity":x)
	|
]
interface =
{
	n0, f0
}
where s != f

markOutputsBlue
(
	a, b : list;
	x : int
)
[
	(n0, a)
	(n1, b#blue)
	|
	(e0, n0, n1, x)
]
=>
[
	(n0, a#blue)
	(n1, b#blue)
	|
	(e0, n0, n1, x)
]
interface =
{
	n0, n1
}

markOutputsRed
(
	a, b : list;
	x : int
)
[
	(n0, a)
	(n1, b#red)
	|
	(e0, n0, n1, x)
]
=>
[
	(n0, a#blue)
	(n1, b#red)
	|
	(e0, n0, n1, x)
]
interface =
{
	n0, n1
}

addEdgeToArity
(
	a, b : list;
	f, s : string;
	x, y : int
)
[1.0]
[
	(n0, a:f#red)
	(n1, b:s)
	(a0(R), "Arity":x)
	(a1(R), "TArity":y)
	|
]
=>
[
	(n0, a:f#red)
	(n1, b:s)
	(a0(R), "Arity":x + 1)
	(a1(R), "TArity":y)
	|
	(e0, n0, n1, x)
]
interface =
{
	n0, n1, a0, a1
}
where x < y

deleteEdgeToArity
(
	a, b, c : list;
	f : string;
	x, y, z : int
)
[1.0]
[
	(n0, a:f#red)
	(n1, b)
	(a0(R), "Arity":x)
	(a1(R), "TArity":y)
	|
	(e0, n0, n1, z)
]
=>
[
	(n0, a:f#red)
	(n1, b)
	(a0(R), "Arity":x - 1)
	(a1(R), "TArity":y)
	|
]
interface =
{
	n0, n1, a0, a1
}
where x > y

resetArityCounter
(
	x : int
)
[
	(a0(R), "Arity":x)
	|
]
=>
[
	(a0(R), "Arity":0)
	|
]
interface = {
	a0
}

bucketEdge
(
  a, b : list;
	x : int
)
[
  (n0, a#red)
  (n1, b)
  |
  (e0, n0, n1, x)
]
=>
[
  (n0, a#red)
  (n1, b)
  |
  (e0, n0, n1, x#red)
]
interface = {
  n0, n1
}

readdEdge
(
  a, b : list;
	x, y : int
)
[1.0]
[
	(n0, a#red)
	(n1, b)
	(a0(R), "Arity": x)
  |
  (e0, n0, n1, y#red)
]
=>
[
	(n0, a#red)
	(n1, b)
	(a0(R), "Arity": x + 1)
  |
  (e0, n0, n1, x)
]
interface = {
  n0, n1, a0
}

deleteArityC
(
	x, y : int
)
[
	(a0, "Arity":x)
	(a1, "TArity":y)
	|
]
=>
[
	|
]
interface =
{

}

unmarkBlue
(
	a : list
)
[
	(n0, a#blue)
	|
]
=>
[
	(n0, a)
	|
]
interface =
{
	n0
}

unmarkRed
(
	a : list
)
[
	(n0, a#red)
	|
]
=>
[
	(n0, a)
	|
]
interface =
{
	n0
}
