//Mutation Functions
Main = MutateTargetChange

MutateTargetChange = sweighted:{pickEdgeMutate, pickFuncMutate}; try pickedEdge then MutateEdgeChange; try pickedNode then MutateFuncChange

MutateEdgeChange = try (weighted:pickEdge; unmarkActive!; markOutputs!; weighted:pickNewTarget; mutateEdge; unmarkOutputs!)
MutateFuncChange = weighted:pickNode; weighted:mutateNode; if lowArity then (markOutputs!; weighted:addEdgeToArityBlue!) else (if highArity then weighted:deleteInput!); unmarkOutputs!


// CLEAR TARGET ----- Resets the target graph
clearTargetMark
(
	a : list;
	s : string
)
[

	(n0, a:s#any)
	|
]
=>
[

	(n0, a:s)
	|
]
interface =
{
	n0
}

// CLEAR TARGET ----- Resets the target graph edges
clearTargetEdge
(
	a, b, c : list
)
[

	(n0, a)
	(n1, b)
	|
	(e0, n0, n1, c#any)
]
=>
[

	(n0, a)
	(n1, b)
	|
	(e0, n0, n1, c)
]
interface =
{
	n0, n1
}

// INIT MUTATION COUNTER - Creates a counter for sweeping through MUTATIONS
initMutationCounter
(
	x : int
)
[
	(n0(R), "Mutations":x)
	|
]
=>
[
	(n0(R), "Mutations":x)
	(n1(R), "Mutated":-1)
	|
]
interface =
{
	n0
}


// CHECK MUTATIONS - Checks if we have swept all mutations
checkMutationCounter
(
	x, y : int
)
[
	(n0(R), "Mutations":x)
	(n1(R), "Mutated":y)
	|
]
=>
[
	(n0(R), "Mutations":x)
	(n1(R), "Mutated":y + 1)
	|
]
interface =
{
	n0, n1
}
where y < x


// DELETE MUTATION COUNTER - Deletes a counter for sweeping through mutations
deleteMutationCounter
(
	x : int
)
[
	(n1(R), "Mutated":x)
	|
]
=>
[
	|
]
interface =
{
}

pickEdgeMutate
(
	x : int
)
[
	(n0(R), "Mutations":x)
	|
]
=>
[
	(n0(R), "Mutations":x)
	(token(R), "MutateEdge")
	|
]
interface =
{
	n0
}

pickFuncMutate
(
	a, c : list;
	s : string
)
[
	(n0, a:s)
	(f1(R), "FunctionSet":s:c)
	|
]
=>
[
	(n0, a:s)
	(f1(R), "FunctionSet":s:c)
	(token(R), "MutateNode")
	|
]
interface =
{
	n0, f1
}

pickedEdge
()
[
	(token(R), "MutateEdge")
	|
]
=>
[
	|
]
interface =
{
}

pickedNode
()
[
	(token(R), "MutateNode")
	|
]
=>
[
	|
]
interface =
{
}

pickEdge
(
	a, b, c : list
)
[
	(n0, a)
	(n1, b)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0(R), a#blue)
	(n1(R), b#green)
	|
	(e0, n0, n1, c#green)
]
interface =
{
	n0, n1
}


markOutputs
(
	a, b, c : list
)
[
	(n0, a)
	(n1, b#any)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a#blue)
	(n1, b#any)
	|
	(e0, n0, n1, c)
]
interface =
{
	n0, n1
}

pickNewTarget
(
	d : list;
	s : string
)
[
	(n2, d:s)
	|
]
=>
[
	(n2(R), d:s#red)
	|
]
interface =
{
	n2
}
where s != "OUT"

mutateEdge
(
	a, b, c, d : list;
	s : string
)
[
	(n0(R), a#blue)
	(n1(R), b#green)
	(n2(R), d:s#red)
	|
	(e0, n0, n1, c#green)
]
=>
[
	(n0, a)
	(n1, b)
	(n2, d:s)
	|
	(e0, n0, n2, c)
]
interface =
{
	n0, n1, n2
}
where s != "OUT"

unmarkOutputs
(
	a : list
)
[
	(n0, a#any)
	|
]
=>
[
	(n0, a)
	|
]
interface =
{
	n0
}

pickNode
(
	a : list;
	s : string
)
[
	(n0, a:s)
	|
]
=>
[
	(n0(R), a:s#blue)
	|
]
interface =
{
	n0
}
where s != "IN" and s != "OUT"

mutateNode
(
	a, b : list;
	s, f : string
)
[
	(n0(R), a:s#blue)
	(f0(R), "FunctionSet":f:b)
	|
]
=>
[
	(n0, a:f#red)
	(f0(R), "FunctionSet":f:b)
	|
]
interface =
{
	n0, f0
}
where s != f


unmarkActive
(
	a : list
)
[
	(n0, a#red)
	|
]
=>
[
	(n0, a)
	|
]
interface =
{
	n0
}

lowArity
(
	a : list;
	f : string;
	x : int
)
[
	(n0, a:f#red)
	(f0(R), "FunctionSet":f:x)
	|
]
=>
[
	(n0, a:f#red)
	(f0(R), "FunctionSet":f:x)
	|
]
interface =
{
	n0, f0
}
where outdeg(n0) < x


highArity
(
	a : list;
	f : string;
	x : int
)
[
	(n0, a:f#red)
	(f0(R), "FunctionSet":f:x)
	|
]
=>
[
	(n0, a:f#red)
	(f0(R), "FunctionSet":f:x)
	|
]
interface =
{
	n0, f0
}
where outdeg(n0) > x

deleteInput
(
	a, b, c : list;
	f : string;
	x : int
)
[
	(n0, a:f#red)
	(n1, b)
	(f0(R), "FunctionSet":f:x)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a:f#red)
	(n1, b)
	(f0(R), "FunctionSet":f:x)
	|
]
interface =
{
	n0, n1, f0
}
where outdeg(n0) > x

// ADD EDGE TO ARITY - Adds an edge to a target node until it has sufficient arity, reused in mutations
addEdgeToArityBlue
(
	a, b : list;
	f, s : string;
	x : int
)
[
	(n0, a:f#red)
	(n1, b:s)
	(f0(R), "FunctionSet":f:x)
	|
]
=>
[
	(n0, a:f#red)
	(n1, b:s)
	(f0(R), "FunctionSet":f:x)
	|
	(e0, n0, n1, empty)
]
interface =
{
	n0, n1, f0
}
where s != "OUT" and outdeg(n0) < x
