Main = markOutputNode!; markActiveNode!; try sweighted:{idemAndB,idemOrB,doubNandB,doubNorB}!; deleteOldNEdge!; deleteOldAEdge!; unmarkEdge!; unmarkNode!

markOutputNode
(
	a : list
)
[
	(n0, a : "OUT")
	|
]
=>
[
	(n0, a : "OUT"#blue)
	|
]
interface = {
	n0
}

markActiveNode
(
	a,b, c : list
)
[
	(n0, a#blue)
	(n1, b)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a#blue)
	(n1, b#blue)
	|
	(e0, n0, n1, c)
]
interface = {
	n0,n1
}

pickNeutral
(
	a : list
)
[
	(n0, a)
	|
]
=>
[
	(n0, a#green)
	|
]
interface = {
	n0
}



unmarkNode
(
	a : list
)
[
	(n0, a#any)
	|
]
=>
[
	(n0, a)
	|
]
interface = {
	n0
}

deleteOldAEdge
(
	a, b,c : list
)
[
	(n0, a#red)
	(n1, b#any)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a#red)
	(n1, b#any)
	|
]
interface = {
	n0, n1
}

deleteOldNEdge
(
	a, b,c : list
)
[
	(n0, a#red)
	(n1, b)
	|
	(e0, n0, n1,c)
]
=>
[
	(n0, a#red)
	(n1, b)
	|
]
interface = {
	n0, n1
}

unmarkEdge
(
	a, b, c : list
)
[
	(n0, a#any)
	(n1, b#any)
	|
	(e0, n0, n1,c#red)
]
=>
[
	(n0, a#any)
	(n1, b#any)
	|
	(e0, n0, n1, c)
]
interface = {
	n0, n1
}


idemAndB
(
	a, b, c, d : list
)
[
	(n0, a#blue)
	(n1, b:"AND"#blue)
	(n3, c#blue)
	|
	(e0, n0, n1, d)
	(e1, n1, n3, 0)
	(e2, n1, n3, 1)
]
=>
[
	(n0, a#blue)
	(n1, b:"AND"#blue)
	(n3, c#blue)
	|
	(e0, n0, n3, d)
	(e1, n1, n3, 0)
	(e2, n1, n3, 1)
]
interface = {
	n0, n1, n3
}

idemOrB
(
	a, b, c, d : list
)
[
	(n0, a#blue)
	(n1, b:"OR"#blue)
	(n3, c#blue)
	|
	(e0, n0, n1, d)
	(e1, n1, n3, 0)
	(e2, n1, n3, 1)
]
=>
[
	(n0, a#blue)
	(n1, b:"OR"#blue)
	(n3, c#blue)
	|
	(e0, n0, n3, d)
	(e1, n1, n3, 0)
	(e2, n1, n3, 1)
]
interface = {
	n0, n1, n3
}

doubNegB
(
	a, b, e : list
)
[
	(n0, a#blue)
	(n1, b#blue)
	(n3, "NOT"#blue)
	(n4,  "NOT"#blue)
	|
	(e0, n0, n3, e)
	(e1, n3, n4, 0)
	(e2, n4, n1, 0)
]
=>
[
	(n0, a#blue)
	(n1, b#blue)
	(n3, "NOT"#blue)
	(n4, "NOT"#blue)
	|
	(e0, n0, n1, e)
	(e1, n3, n4, 0)
	(e2, n4, n1, 0)
]
interface = {
	n0, n1, n3, n4
}

doubNorB
(
	a, b, e : list
)
[
	(n0, a#blue)
	(n1, b#blue)
	(n3, "NOR"#blue)
	(n4, "NOR"#blue)
	|
	(e0, n0, n3, e)
	(e1, n3, n4, 0)
	(e2, n3, n4, 1)
	(e3, n4, n1, 0)
	(e4, n4, n1, 1)
]
=>
[
	(n0, a#blue)
	(n1, b#blue)
	(n3, "NOR"#blue)
	(n4, "NOR"#blue)
	|
	(e0, n0, n1, e)
	(e1, n3, n4, 0)
	(e2, n3, n4, 1)
	(e3, n4, n1, 0)
	(e4, n4, n1, 1)
]
interface = {
	n0, n1, n3, n4
}

doubNandB
(
	a, b, e : list
)
[
	(n0, a#blue)
	(n1, b#blue)
	(n3, "NAND"#blue)
	(n4, "NAND"#blue)
	|
	(e0, n0, n3, e)
	(e1, n3, n4, 0)
	(e2, n3, n4, 1)
	(e3, n4, n1, 0)
	(e4, n4, n1, 1)
]
=>
[
	(n0, a#blue)
	(n1, b#blue)
	(n3, "NAND"#blue)
	(n4, "NAND"#blue)
	|
	(e0, n0, n1, e)
	(e1, n3, n4, 0)
	(e2, n3, n4, 1)
	(e3, n4, n1, 0)
	(e4, n4, n1, 1)
]
interface = {
	n0, n1, n3, n4
}


reduceNor
(
	a, b, c, e, f : list
)
[
	(n0, a:"NOT"#blue)
	(n1, b#blue)
	(n2, c#blue)
	(n3, "OR"#blue)
	|
	(e0, n3, n1, e)
	(e1, n3, n2, f)
	(e2, n0, n3, 0)
]
=>
[
  (n0, a:"NOR"#blue)
  (n1, b#blue)
  (n2, c#blue)
  (n3, "OR"#blue)
  |
  (e0, n3, n1, e)
  (e1, n3, n2, f)
  (e2, n0, n1, e)
  (e3, n0, n2, f)
]
interface =
{
  n0, n1, n2, n3
}

reduceNand
(
	a, b, c, e, f : list
)
[
	(n0, a:"NOT"#blue)
	(n1, b#blue)
	(n2, c#blue)
	(n3, "AND"#blue)
	|
	(e0, n3, n1, e)
	(e1, n3, n2, f)
	(e2, n0, n3, 0)
]
=>
[
  (n0, a:"NAND"#blue)
  (n1, b#blue)
  (n2, c#blue)
  (n3, "AND"#blue)
  |
  (e0, n3, n1, e)
  (e1, n3, n2, f)
  (e2, n0, n1, e)
  (e3, n0, n2, f)
]
interface =
{
  n0, n1, n2, n3
}

demorgansB1
(
	a, b, c, d,e,f,g,h : list;
	s : string
)
[
	(n0, "OR"#blue)
	(n1, "NOT"#blue)
	(n2, "NOT"#blue)
	(n3, a#blue)
	(n4, b#blue)
	(n5, c:s#green)
	|
	(e0, n0, n1, e)
	(e3, n0, n2, f)
	(e1, n1, n3, g)
	(e2, n2, n4, h)
]
=>
[
	(n0, "NOT"#blue)
	(n1, "NOT"#blue)
	(n2, "NOT"#blue)
	(n3, a#blue)
	(n4, b#blue)
	(n5, "AND"#red)
	|
	(e0, n0, n5, 0)
	(e1, n1, n3, g)
	(e2, n2, n4, h)
	(e3, n5, n3, 0#red)
	(e4, n5, n4, 1#red)
]
interface = {
	n0, n1, n2, n3, n4, n5
}
where s != "IN" and indeg(n1) = 1 and indeg(n2) = 1

demorgansB2
(
	a, b, c, d,e,f,g,h : list;
	s : string
)
[
	(n0, "AND"#blue)
	(n1, "NOT"#blue)
	(n2, "NOT"#blue)
	(n3, a#blue)
	(n4, b#blue)
	(n5, c:s#green)
	|
	(e0, n0, n1, e)
	(e3, n0, n2, f)
	(e1, n1, n3, g)
	(e2, n2, n4, h)
]
=>
[
	(n0, "NOT"#blue)
	(n1, "NOT"#blue)
	(n2, "NOT"#blue)
	(n3, a#blue)
	(n4, b#blue)
	(n5, "OR"#red)
	|
	(e0, n0, n5, 0)
	(e1, n1, n3, g)
	(e2, n2, n4, h)
	(e3, n5, n3, 0#red)
	(e4, n5, n4, 1#red)
]
interface = {
	n0, n1, n2, n3, n4, n5
}
where s != "IN" and indeg(n1) = 1 and indeg(n2) = 1
